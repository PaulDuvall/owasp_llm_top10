name: LLM01 - Prompt Injection Tests

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov
        pip install awscli

    - name: Check for required variables
      run: |
        if [ -z "${{ vars.AWS_ROLE_TO_ASSUME }}" ]; then
          echo "::error::AWS_ROLE_TO_ASSUME variable is not set. Run the setup_oidc.sh script to configure OIDC authentication."
          echo "::error::Command: ./scripts/setup_oidc.sh -o <github-org> -r <repo-name> -t <github-token>"
          exit 1
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
        aws-region: us-east-1

    - name: Validate IAM permissions
      id: validate_permissions
      run: |
        echo "Validating IAM permissions..."
        caller_identity=$(aws sts get-caller-identity)
        echo "$caller_identity"
        account_id=$(echo "$caller_identity" | grep -o '"Account": "[0-9]\+"' | cut -d '"' -f 4)
        echo "AWS Account ID: $account_id"

    - name: Get API keys from AWS Parameter Store
      run: |
        echo "Getting API keys from AWS Parameter Store"
        export OPENAI_API_KEY=$(aws ssm get-parameter --name /owasp-llm-top10/OPENAI_API_KEY --with-decryption --query Parameter.Value --output text)
        echo "::add-mask::$OPENAI_API_KEY"
        echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> $GITHUB_ENV

    # --------- REAL MODE ---------
    - name: Run prompt injection demo (real mode)
      run: ./run.sh demo

    - name: Generate report for real mode
      run: ./run.sh report

    - name: Upload real mode report (HTML)
      uses: actions/upload-artifact@v4
      with:
        name: prompt-injection-report-real
        path: report/reports/prompt_injection_report.html

    # --------- SIMULATED MODE ---------
    - name: Run prompt injection demo (simulation mode)
      run: ./run.sh demo --simulate-vulnerable

    - name: Generate report for simulation mode
      run: ./run.sh report

    - name: Upload simulation mode report (HTML)
      uses: actions/upload-artifact@v4
      with:
        name: prompt-injection-report-simulated
        path: report/reports/prompt_injection_report.html

    # --------- OPTIONAL: Upload all test results and coverage ---------
    - name: Upload all test results and coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results/
          coverage.xml